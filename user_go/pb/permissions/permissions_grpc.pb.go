// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: protos/permissions.proto

package permissions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Permissions_GetUserPermissions_FullMethodName = "/user.Permissions/GetUserPermissions"
)

// PermissionsClient is the client API for Permissions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionsClient interface {
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*UserPermissions, error)
}

type permissionsClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionsClient(cc grpc.ClientConnInterface) PermissionsClient {
	return &permissionsClient{cc}
}

func (c *permissionsClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*UserPermissions, error) {
	out := new(UserPermissions)
	err := c.cc.Invoke(ctx, Permissions_GetUserPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionsServer is the server API for Permissions service.
// All implementations must embed UnimplementedPermissionsServer
// for forward compatibility
type PermissionsServer interface {
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*UserPermissions, error)
	mustEmbedUnimplementedPermissionsServer()
}

// UnimplementedPermissionsServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionsServer struct {
}

func (UnimplementedPermissionsServer) GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*UserPermissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedPermissionsServer) mustEmbedUnimplementedPermissionsServer() {}

// UnsafePermissionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionsServer will
// result in compilation errors.
type UnsafePermissionsServer interface {
	mustEmbedUnimplementedPermissionsServer()
}

func RegisterPermissionsServer(s grpc.ServiceRegistrar, srv PermissionsServer) {
	s.RegisterService(&Permissions_ServiceDesc, srv)
}

func _Permissions_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissions_GetUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsServer).GetUserPermissions(ctx, req.(*GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Permissions_ServiceDesc is the grpc.ServiceDesc for Permissions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permissions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Permissions",
	HandlerType: (*PermissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPermissions",
			Handler:    _Permissions_GetUserPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/permissions.proto",
}
