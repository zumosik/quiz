// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: protos/files.proto

package files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Files_UploadFile_FullMethodName     = "/files.Files/UploadFile"
	Files_GetFileById_FullMethodName    = "/files.Files/GetFileById"
	Files_GetFilesByName_FullMethodName = "/files.Files/GetFilesByName"
	Files_GetFilesByUser_FullMethodName = "/files.Files/GetFilesByUser"
)

// FilesClient is the client API for Files service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesClient interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	GetFileById(ctx context.Context, in *GetFileByIdRequest, opts ...grpc.CallOption) (*GetFileByIdResponse, error)
	GetFilesByName(ctx context.Context, in *GetFilesByNameRequest, opts ...grpc.CallOption) (*GetFilesByNameResponse, error)
	GetFilesByUser(ctx context.Context, in *GetFilesByUserRequest, opts ...grpc.CallOption) (*GetFilesByUserResponse, error)
}

type filesClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesClient(cc grpc.ClientConnInterface) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, Files_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetFileById(ctx context.Context, in *GetFileByIdRequest, opts ...grpc.CallOption) (*GetFileByIdResponse, error) {
	out := new(GetFileByIdResponse)
	err := c.cc.Invoke(ctx, Files_GetFileById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetFilesByName(ctx context.Context, in *GetFilesByNameRequest, opts ...grpc.CallOption) (*GetFilesByNameResponse, error) {
	out := new(GetFilesByNameResponse)
	err := c.cc.Invoke(ctx, Files_GetFilesByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetFilesByUser(ctx context.Context, in *GetFilesByUserRequest, opts ...grpc.CallOption) (*GetFilesByUserResponse, error) {
	out := new(GetFilesByUserResponse)
	err := c.cc.Invoke(ctx, Files_GetFilesByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesServer is the server API for Files service.
// All implementations must embed UnimplementedFilesServer
// for forward compatibility
type FilesServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	GetFileById(context.Context, *GetFileByIdRequest) (*GetFileByIdResponse, error)
	GetFilesByName(context.Context, *GetFilesByNameRequest) (*GetFilesByNameResponse, error)
	GetFilesByUser(context.Context, *GetFilesByUserRequest) (*GetFilesByUserResponse, error)
	mustEmbedUnimplementedFilesServer()
}

// UnimplementedFilesServer must be embedded to have forward compatible implementations.
type UnimplementedFilesServer struct {
}

func (UnimplementedFilesServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFilesServer) GetFileById(context.Context, *GetFileByIdRequest) (*GetFileByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileById not implemented")
}
func (UnimplementedFilesServer) GetFilesByName(context.Context, *GetFilesByNameRequest) (*GetFilesByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByName not implemented")
}
func (UnimplementedFilesServer) GetFilesByUser(context.Context, *GetFilesByUserRequest) (*GetFilesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByUser not implemented")
}
func (UnimplementedFilesServer) mustEmbedUnimplementedFilesServer() {}

// UnsafeFilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServer will
// result in compilation errors.
type UnsafeFilesServer interface {
	mustEmbedUnimplementedFilesServer()
}

func RegisterFilesServer(s grpc.ServiceRegistrar, srv FilesServer) {
	s.RegisterService(&Files_ServiceDesc, srv)
}

func _Files_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Files_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_GetFileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).GetFileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Files_GetFileById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).GetFileById(ctx, req.(*GetFileByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_GetFilesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).GetFilesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Files_GetFilesByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).GetFilesByName(ctx, req.(*GetFilesByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_GetFilesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).GetFilesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Files_GetFilesByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).GetFilesByUser(ctx, req.(*GetFilesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Files_ServiceDesc is the grpc.ServiceDesc for Files service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Files_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "files.Files",
	HandlerType: (*FilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _Files_UploadFile_Handler,
		},
		{
			MethodName: "GetFileById",
			Handler:    _Files_GetFileById_Handler,
		},
		{
			MethodName: "GetFilesByName",
			Handler:    _Files_GetFilesByName_Handler,
		},
		{
			MethodName: "GetFilesByUser",
			Handler:    _Files_GetFilesByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/files.proto",
}
